{
  stateMap "passthrough"; // TODO

  vertexShader 3.0 "l_point_flag_hsm_tc0_dtex.hlsl"
  {
    worldMatrix = constant.transposeWorldMatrix;
    viewProjectionMatrix = constant.transposeViewProjectionMatrix;
    shadowLookupMatrix = constant.transposeShadowLookupMatrix;
    flagParms = material.flagParms;
  }

  pixelShader 3.0 "l_spot_flag_hsm_t0c0.hlsl"
  {
    attenuationSampler = sampler.light.attenuation;
    colorMapSampler = material.colorMap;
    shadowmapSamplerSpot = sampler.shadowmapSpot;
    lightSpotDir = constant.light.spotDir;
    lightSpotFactors = constant.light.spotFactors;
    lightPosition = constant.light.position;
    lightDiffuse = constant.light.diffuse;
    fogColorLinear = float4( 0, 0, 0, 0 );
  }

  vertex.position = code.position;
  vertex.color[0] = code.color;
  vertex.texcoord[0] = code.texcoord[0];
  vertex.normal = code.normal;
  vertex.texcoord[2] = code.tangent;
}
